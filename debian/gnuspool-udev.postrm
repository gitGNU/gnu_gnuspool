#!/bin/sh
# postrm script for gnuspool-udev
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

scripts=/usr/share/gnuspool-udev
udevdir=/lib/udev
rulesdir=/lib/udev/rules.d
rule=70-gspl-printers.rules
confscript=udev-configure-gnuspool

# Return 0 (shell true) if the patch to the permissions has been done
# Otherwise return 1 (shell false)

checkfunc() {
    lines=`fgrep 'GROUP="lp"' $rulesdir/*|fgrep -c 'OWNER="gnuspool"'`
    if [ $lines -eq 0 ]
    then return 0
    else return 1
    fi
}

uneditfunc() {
    ed -s $1 <<'EOF'
g/OWNER="gnuspool", GROUP="lp"/s/OWNER="gnuspool", GROUP="lp"/GROUP="lp"/
w
q
EOF
}

case "$1" in
    purge|remove|abort-install|disappear)
	if ! checkfunc
	then
	    pfiles=`fgrep -l 'GROUP="lp"' $rulesdir/[0-9]*`
	    if [ -n "$pfiles" ]
	    then
		for pf in $pfiles
		do
		    uneditfunc $pf
		done
	    fi
	fi
	rm -f $rulesdir/$rule
	rm -f $udevdir/$confscript
    ;;

    upgrade|failed-upgrade|abort-upgrade)
	:
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
