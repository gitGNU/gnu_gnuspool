.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "gspool_jobdel 3"
.TH gspool_jobdel 3 "2009-05-30" "GNUspool Release 1" "GNUspool Print Manager"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gspool_jobdel \- delete a job
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <gspool.h>\fR
.PP
\&\fBint gspool_jobdel(const int\fR
\&\fIfd\fR\fB, const unsigned\fR
\&\fIflags\fR\fB, const slotno_t\fR
\&\fIslot\fR\fB)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fB\f(BIgspool_jobdel()\fB\fR function is used to delete a job, aborting it if it
is currently printing.
.PP
\&\fIfd\fR is a file descriptor previously returned by \fBgspool_open\fR
.PP
\&\fIflags\fR is zero, or the logical \s-1OR\s0 of one or both of the following:
.IP "\s-1GSPOOL_FLAG_IGNORESEQ\s0" 8
.IX Item "GSPOOL_FLAG_IGNORESEQ"
Ignore changes since the list was last read
.IP "\s-1GSPOOL_FLAG_FORCE\s0" 8
.IX Item "GSPOOL_FLAG_FORCE"
Ignore \*(L"not printed\*(R" flag
.PP
\&\fIslot\fR is the slot number corresponding to the job as previously
returned by \fBgspool_joblist\fR, or \fBgspool_jobfindslot\fR.
.PP
If the job has not been printed, and \fIflags\fR does not contain
\&\f(CW\*(C`GSPOOL_FLAG_FORCE\*(C'\fR, then the job will not be deleted, but the error
\&\f(CW\*(C`GSPOOL_NOT_PRINTED\*(C'\fR will be reported. You can tell whether the job
has been printed from the \f(CW\*(C`struct apispq\*(C'\fR job structure returned by \fBxb_jobread\fR
or \fBxb_jobfind\fR. The field \f(CW\*(C`apispq_dflags\*(C'\fR has the bit designated by
\&\f(CW\*(C`APISPQ_PRINTED\*(C'\fR set if it has been printed.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The function \fBgspool_jobdel()\fR returns 0 if successful, otherwise one
of the following codes:
.IP "GSPOOL_UNKNOWN_JOB" 8
job not found
.IP "GSPOOL_INVALID_FD" 8
Invalid File descriptor
.IP "GSPOOL_BADWRITE" 8
failure writing to the network
.IP "GSPOOL_BADREAD" 8
failure reading from the network
.IP "GSPOOL_NOPERM" 8
The user does not have permission
.IP "GSPOOL_SEQUENCE" 8
sequence error, slot may be out of date
.IP "GSPOOL_INVALIDSLOT" 8
Invalid slot number
.IP "GSPOOL_NOT_PRINTED" 8
the job has not been printed
.SH "EXAMPLE"
.IX Header "EXAMPLE"
An example to delete all jobs:
.PP
.Vb 2
\& int fd, ret, nj, i;
\& slotno_t *slots;
\&
\& fd = gspool_open("myhost", (char *) 0, 0);
\& if (fd < 0) { /* error handling */
\&     ...
\& }
\&
\& ret = gspool_joblist(fd, 0, &nj, &slots);
\& if (ret < 0) { /* error handling */
\&     ...
\& }
\&
\& for (i = 0; i < nj; i++) {
\&     ret = gspool_jobdel(fd, GSPOOL_FLAG_FORCE, slots[i]);
\&     if (ret < 0) { /* error handling */
\&         ...
\&     }
\& }
\& gspool_close(fd);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgspool_joblist\fR\|(3),
\&\fIgspool_jobread\fR\|(3),
\&\fIgspool_jobdata\fR\|(3),
\&\fIgspool_jobadd\fR\|(3),
\&\fIgspool_jobfind\fR\|(3),
\&\fIgspool_jobfindslot\fR\|(3),
\&\fIgspool_jobupd\fR\|(3),
\&\fIgspool_jobmon\fR\|(3),
\&\fIgspool_jobpbrk\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
