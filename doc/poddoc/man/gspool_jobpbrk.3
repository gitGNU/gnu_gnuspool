.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "gspool_jobpbrk 3"
.TH gspool_jobpbrk 3 "2009-05-30" "GNUspool Release 1" "GNUspool Print Manager"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gspool_jobpbrk \- retrieve the page offsets and delimiter string
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <gspool.h>\fR
.br
\&\fB#include <stdio.h>\fR
.PP
\&\fB\s-1FILE\s0 *gspool_jobpbrk(const int\fR
\&\fIfd\fR\fB, const unsigned\fR
\&\fIflags\fR\fB, const slotno_t\fR
\&\fIslotno\fR\fB)\fR
.PP
\&\fBint gspool_jobpbrk(const int\fR
\&\fIfd\fR\fB, const int\fR
\&\fIoutfile\fR\fB, int (*\fR\fIfunc\fR\fB)(int,void*,unsigned), const unsigned\fR
\&\fIflags\fR\fB, const slotno_t\fR
\&\fIslotno\fR\fB)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Unix and GNU/Linux"
.IX Subsection "Unix and GNU/Linux"
The function \fB\f(BIgspool_jobpbrk()\fB\fR is used to retrieve the page break offset
file of a job.
.PP
\&\fIfd\fR is a file descriptor previously returned by \fBgspool_open\fR. \fIflags\fR
is zero, or \f(CW\*(C`GSPOOL_FLAG_IGNORESEQ\*(C'\fR to changes since the job list was last read.
.PP
\&\fIslotno\fR is the slot number corresponding to the job previously
returned by functions such as \fBgspool_joblist\fR or \fBgspool_jobfindslot\fR.
.PP
The result is a \f(CW\*(C`FILE\*(C'\fR pointer which can be used with all standard
I/O input functions such as \fIfread\fR\|(3), \fIfgets\fR\|(3), \fIgetc\fR\|(3) etc. At the
end of the data \fIfclose\fR\|(3) must be called. For reasons of
sychronisation the file should be read to the end before other
operations are attempted.
.PP
If an error is detected, \fBgspool_jobpbrk\fR returns \f(CW\*(C`NULL\*(C'\fR and an error
code is placed in the external variable \f(CW\*(C`gspool_dataerror\*(C'\fR.
.PP
If there is no page offset file, probably because the delimiter is set
to formfeed, then this isn't really an error, but an error report of
\&\f(CW\*(C`GSPOOL_BAD_PF\*(C'\fR will be returned. You can tell whether there is a page
file from the \f(CW\*(C`struct apispq\*(C'\fR job structure returned by \fBxb_jobread\fR
or \fBxb_jobfind\fR. The field \f(CW\*(C`apispq_dflags\*(C'\fR has the bit designated by
\&\f(CW\*(C`APISPQ_PAGEFILE\*(C'\fR set if there is a page file.
.PP
The data is returned in three parts.
.IP "struct apipages" 8
.IX Item "struct apipages"
This is an instance of the following structure, defined in
\&\fIgspool.h\fR, and described below.
.IP "delimiter string" 8
.IX Item "delimiter string"
This is the delimiter string itself.
.IP "vector of longs" 8
.IX Item "vector of longs"
This is a vector of \f(CW\*(C`long\*(C'\fRs giving the offsets of the start of each
page, including the first page, which is always zero, within the job
data (as read by \fBgspool_jobdata\fR).
.SS "Windows"
.IX Subsection "Windows"
The second format of the \fBgspool_jobpbrk\fR function is for use by Windows
programs, as there is no acceptable equivalent of the \fIpipe\fR\|(2)
construct.
.PP
The second argument \fIoutfile\fR is (possibly) a file handle to the file
from to which the job data is passed as the first argument to
\&\fIfunc\fR.
.PP
The third argument \fIfunc\fR is a function with the same specifications
as \f(CW\*(C`write\*(C'\fR, indeed it may very well be \f(CW\*(C`write\*(C'\fR. The main reason for
doing it this way is that some versions of Windows do strange things
if \f(CW\*(C`write\*(C'\fR is invoked from within a \s-1DLL\s0.
.PP
Other aspects of the interface are similar to the Unix routine, apart
from the routine returning zero for success and an error code for
failure rather than a \f(CW\*(C`FILE*\*(C'\fR or \f(CW\*(C`NULL\*(C'\fR. For consistency with the
Unix version, the external variable \f(CW\*(C`gspool_dataerror\*(C'\fR is also
assigned any error code returned.
.PP
The \f(CW\*(C`struct apipages\*(C'\fR structure is as follows:
.PP
.Vb 5
\& struct apipages {
\&   long delimnum;  /* Number of delimiters */
\&   long deliml;    /* Length of delimiter string */
\&   long lastpage;  /* Number of delimiters remaining on last page */
\& };
.Ve
.SH "ERROR CODES"
.IX Header "ERROR CODES"
In the event of an error, the external variable \f(CW\*(C`gspool_dataerror\*(C'\fR is
set to the error code. The Unix version of \fBgspool_jobpbrk\fR returns
\&\f(CW\*(C`NULL\*(C'\fR. The Windows version returns the error code.
Error codes which might be returned are:
.IP "GSPOOL_INVALID_FD" 8
Invalid file descriptor
.IP "GSPOOL_BADWRITE" 8
failure writing to network
.IP "GSPOOL_BADREAD" 8
failure reading from network
.IP "GSPOOL_UNKNOWN_JOB" 8
job not found
.IP "GSPOOL_NOPERM" 8
job does not belong to user
.IP "GSPOOL_SEQUENCE" 8
sequence error, job may be out of data
.IP "GSPOOL_INVALIDSLOT" 8
Invalid slot number
.IP "GSPOOL_BAD_PF" 8
The job had no page file
.IP "GSPOOL_NOMEM_PF" 8
There is no memory for the page file
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgspool_joblist\fR\|(3),
\&\fIgspool_jobread\fR\|(3),
\&\fIgspool_jobdata\fR\|(3),
\&\fIgspool_jobadd\fR\|(3),
\&\fIgspool_jobdel\fR\|(3),
\&\fIgspool_jobfind\fR\|(3),
\&\fIgspool_jobfindslot\fR\|(3),
\&\fIgspool_jobupd\fR\|(3),
\&\fIgspool_jobmon\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
