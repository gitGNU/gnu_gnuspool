.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "gspool_jobadd 3"
.TH gspool_jobadd 3 "2009-05-30" "GNUspool Release 1" "GNUspool Print Manager"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gspool_jobadd \- create a new job
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <gspool.h>\fR
.br
\&\fB#include <stdio.h>\fR
.PP
\&\fB\s-1FILE\s0 *gspool_jobadd(const int\fR
\&\fIfd\fR\fB, struct apispq *\fR\fIjobd\fR\fB, const char *\fR\fIdelim\fR\fB, const unsigned\fR
\&\fIdeliml\fR\fB, const unsigned\fR
\&\fIdelimnum\fR\fB)\fR
.PP
\&\fBint gspool_jobres(const int\fR
\&\fIfd\fR\fB, jobno_t *\fR\fIjobno\fR\fB)\fR
.PP
\&\fBint gspool_jobadd(const int\fR
\&\fIfd\fR\fB, const int\fR
\&\fIinfile\fR\fB, int (*\fR\fIfunc\fR\fB)(int,void*,unsigned)
struct apispq *\fR\fIjobd\fR\fB, const char *\fR\fIdelim\fR\fB, const unsigned\fR
\&\fIdeliml\fR\fB. const unsigned\fR
\&\fIdelimnum\fR\fB)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Unix and GNU/Linux"
.IX Subsection "Unix and GNU/Linux"
The functions \fB\f(BIgspool_jobadd()\fB\fR (the first form) and \fBgspool_jobres\fR are used to add a job
under Unix and GNU/Linux.
.PP
\&\fIfd\fR is a file descriptor previously returned by \fBgspool_open\fR
.PP
\&\fIjobd\fR is a pointer to a \f(CW\*(C`struct apispq\*(C'\fR, as defined in \fIgsapi.h\fR,
containing all the details of the job.
The fields in \fBstruct apispq\fR are defined in the documentation for
\fIgspool_jobread\fR\|(3).
.PP
Note that we recommend that the whole structure be cleared to zeroes
initially and then required fields added; this approach will cover any
future extensions with additional fields which will behave as at
present if zero.
.PP
Also note that from release 23 an additional field \f(CW\*(C`apispq_pglim\*(C'\fR is
provided in the structure. If this is non-zero, then the size of the
job is limited. If the bit \f(CW\*(C`APISPQ_PGLIMIT\*(C'\fR in \f(CW\*(C`apispq_dflags\*(C'\fR is
zero, then the size is limited to the given number of kilobytes. If
this bit is set, then the size is limited to the given number of
pages. If a job exceeds the given limit, then its treatment depends
upon the setting of the bit \f(CW\*(C`APISPQ_ERRLIMIT\*(C'\fR in
\&\f(CW\*(C`apispq_dflags\*(C'\fR. If this is zero, then the job is truncated to the
given number of kilobytes or pages and still proceeds (although a
warning code is returned by \fBgspool_jobres\fR). If it is set, then it is
rejected altogether.
.PP
\&\fIdelim\fR is a pointer to a string containing the page delimiter
string, or \f(CW\*(C`NULL\*(C'\fR if the user is content with the single formfeed
character. \fIdeliml\fR is the length of the delimiter string
\&\fIdelim\fR. This is necessary because \fIdelim\fR is not necessarily
null-terminated.
.PP
\&\fIdelimnum\fR in the number of instances of the delimiter
string/character to be counted to make up a page.
.PP
The result is either a standard I/O stream, which can be used as
output for \fIputc\fR\|(3), \fIfprintf\fR\|(3), \fIfwrite\fR\|(3) etc, or \f(CW\*(C`NULL\*(C'\fR to indicate
an error has been detected. The I/O stream connection should be
closed, when complete, with \fIfclose\fR\|(3). Finally a call should be made
to \fBgspool_jobres\fR.
.PP
For reasons of synchronisation you \fImust\fR call \fBgspool_jobres\fR
immediately after \fIfclose\fR\|(3) even if you are not interested in the
answer. Apart from that several calls to \fBgspool_jobadd\fR may be in
progress at once to submit several jobs simultaneously.
.PP
\&\fBgspool_jobres\fR returns zero on successful completion (or
\&\f(CW\*(C`GSPOOL_WARN_LIMIT\*(C'\fR if the job was truncated but still submitted). The
parameter \fIjobno\fR is assigned the job number of the job created. This
value is also assigned to the field \f(CW\*(C`apispq_job\*(C'\fR in the passed
structure \fIjobd\fR to \fBgspool_jobadd\fR.
.PP
Note that you should not call \fBgspool_jobres\fR if \fBgspool_jobadd\fR returns
\&\f(CW\*(C`NULL\*(C'\fR for error. Most errors are detected at the \fBgspool_jobadd\fR stage
and before any data is passed across, but this should not in general
be relied upon.
.SS "Windows"
.IX Subsection "Windows"
The second format of the \fBgspool_jobadd\fR function is for use by Windows
programs, as there is no acceptable equivalent of the \fIpipe\fR\|(2)
construct.
.PP
The second argument \fIinfile\fR is (possibly) a file handle to the file
from which the job is created and is passed as the first argument to
\&\fIfunc\fR.
.PP
The third argument \fIfunc\fR is a function with the same specifications
as \f(CW\*(C`read\*(C'\fR, indeed it may very well be \f(CW\*(C`read\*(C'\fR. The main reason for
doing it this way is that some versions of Windows do strange things
if \f(CW\*(C`read\*(C'\fR is invoked from within a \s-1DLL\s0.
.PP
Other aspects of the interface are similar to the Unix routine, apart
from the routine returning zero for success and an error code for
failure rather than a \f(CW\*(C`FILE*\*(C'\fR or \f(CW\*(C`NULL\*(C'\fR.
.PP
There is no \fBgspool_jobres\fR in the windows version, the job number is
placed in the field \f(CW\*(C`apispq_job\*(C'\fR in the passed structure \fIjobd\fR to
\&\fBgspool_jobadd\fR. For consistency with the Unix version, the external
variable \f(CW\*(C`gsapi_dataerror\*(C'\fR is also assigned any error code returned.
.SH "ERRORS"
.IX Header "ERRORS"
If an error is detected the external variable \f(CW\*(C`gspool_dataerror\*(C'\fR will
be set to the error code.
Error codes which might be returned are:
.IP "GSPOOL_INVALID_FD" 8
Invalid file descriptor
.IP "GSPOOL_BADWRITE" 8
failure writing to network
.IP "GSPOOL_BADREAD" 8
failure reading from network
.IP "GSPOOL_SEQUENCE" 8
job sequence error - slot may be out of date
.IP "GSPOOL_UNKNOWN_JOB" 8
job not found
.IP "GSPOOL_NOPERM" 8
job does not belong to user
.IP "GSPOOL_INVALIDSLOT" 8
invalid slot number
.IP "GSPOOL_ZERO_CLASS" 8
invalid (effectively zero) class code
.IP "GSPOOL_BAD_PRIORITY" 8
invalid priority
.IP "GSPOOL_BAD_COPIES" 8
invalid number of copies
.IP "GSPOOL_BAD_FORM" 8
invalid form type
.IP "GSPOOL_UNKNOWN_USER" 8
unknown user name
.IP "GSPOOL_NOMEM_QF" 8
no memory for queue file
.IP "GSPOOL_FILE_FULL" 8
file system is full on host
.IP "GSPOOL_QFULL" 8
message queue full on host
.IP "GSPOOL_EMPTYFILE" 8
no job data given
.IP "GSPOOL_BAD_PTR" 8
invalid printer name given (user is limited)
.IP "GSPOOL_WARN_LIMIT" 8
job size exceeded limit, truncated
.IP "GSPOOL_PAST_LIMIT" 8
job size exceeded limit, rejected
.SH "EXAMPLE"
.IX Header "EXAMPLE"
An example to add a job called \f(CW\*(C`readme\*(C'\fR from standard input:
.PP
.Vb 4
\& int fd, ret, ch;
\& struct apispq outj;
\& jobno_t jn;
\& FILE *f;
\&
\& fd = gspool_open("myhost", (char *) 0, 0);
\& if (fd < 0) { /* error handling */
\&     ...
\& }
\&
\& /* It is safest to clear the structure first */
\& memset((void *) &outj, \*(Aq\e0\*(Aq, sizeof(outj));
\&
\& /* set defaults */
\& outj.apispq_nptimeout = 24 * 7;
\& outj.apispq_ptimeout = 24;
\& outj.apispq_cps = 1;
\& outj.apispq_pri = 150;
\&
\& /* The class code specified in gspool_open is not used here. However the
\& user\*(Aqs class code will be &ed with this unless the user has override
\& class privilege. */
\&
\& outj.apispq_class = 0xffffffff;
\&
\& /* set a large page range to to ensure all pages are printed */
\& outj.apispq_end = 4000;
\&
\& /* Only the form type is compulsory here. The others may
\&    be set to NULL */
\&
\& strcpy(outj.apispq_file, "readme");
\& strcpy(outj.apispq_form, "a4");
\& strcpy(outj.apispq_ptr, "laser");
\&
\& /* add the job with the default page delimiter */
\&
\& f = gspool_outjadd(fd, &outj, (char *) 0, 1, 1);
\& if (!f)  { /* error handling error in gsapi_dataerror */
\&     ...
\& }
\&
\& /* now send the data */
\&
\& while ((ch = getchar()) != EOF)
\&     putc(ch, f);
\& fclose(f);
\&
\& ret = gspool_jobres(fd, &jn);
\& if (ret < 0) { /* error handling */
\&     ...
\& } else
\&     printf("success the job number is %ld\en", jn);
\&
\& gspool_close(fd);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgspool_joblist\fR\|(3),
\&\fIgspool_jobread\fR\|(3),
\&\fIgspool_jobdata\fR\|(3),
\&\fIgspool_jobdel\fR\|(3),
\&\fIgspool_jobfind\fR\|(3),
\&\fIgspool_jobfindslot\fR\|(3),
\&\fIgspool_jobupd\fR\|(3),
\&\fIgspool_jobmon\fR\|(3),
\&\fIgspool_jobpbrk\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
