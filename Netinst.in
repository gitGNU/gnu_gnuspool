#! /usr/bin/perl
#
#   Copyright 2008 Free Software Foundation, Inc.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

use Socket;

$prefix = "@prefix@";
$exec_prefix = "@exec_prefix@";
$bindir = "@bindir@";
$sbindir = "@sbindir@";

# Initialise network setup for GNUspool
# This assumes that network code is compiled in which it usually is

# First set up services (see services.h)

# Services for GNUspool

#gnuspool		48100/tcp        # Connection port
#gnuspool		48100/udp        # Probe port
#gnuspool-feeder        48101/tcp        # Feeder port for GNUspool
#gnuspool-netsrv	48102/tcp        # External job submission
#gnuspool-netsrv	48102/udp        # Client access
#gnuspool-api		48103/tcp        # API
#gnuspool-api		48103/udp        # API (for wakeup messages)

#            Name                pnum  t/u    comment                     alternative names

@Portlist = ([gnuspool		=>	[48100, 'tcp', 'GNUspool connection port', [qw/xitext spshed spooler/]]],
	     [gnuspool		=>	[48100, 'udp', 'GNUspool probe port', [qw/xitext spshed spooler/]]],
	     ["gnuspool-feeder"	=>	[48101, 'tcp', 'GNUspool feeder port', [qw/spq/]]],
	     ["gnuspool-netsrv"	=>	[48102, 'tcp', 'GNUspool external job submission', [qw/xtnetsrv/]]],
	     ["gnuspool-netsrv"	=>	[48102, 'udp', 'GNUspool client access', [qw/xtnetsrv/]]],
	     ["gnuspool-api"	=>	[48103, 'tcp', 'GNUspool API', [qw/xtapi/]]],
	     ["gnuspool-api"	=>	[48103, 'udp', 'GNUspool API wakeup', [qw/xtapi/]]]);

# Make lookup for that lot

for my $p (@Portlist)  {
    my $name = $p->[0];
    my $dets = $p->[1];
    my $pnum = $dets->[0];
    my $istcp = $dets->[1] eq 'tcp';
    my @altnames = @{$dets->[3]};

    my $v = { NAME => $name, PORT => $pnum, LIST => $p, COMMENT => $dets->[2], ALIAS => \@altnames };

    if  ($istcp)  {
	$mtcpnames{$name} = $v;
	$mtcpports{$pnum} = $v;
	for my $a (@altnames) {
	    $mtcpnames{$a} = $v;
	}
    }
    else  {
	$mudpnames{$name} = $v;
	$mudpports{$pnum} = $v;
	for my $a (@altnames) {
	    $mudpnames{$a} = $v;
	}
    }
}

# Read in the services file

while (my ($name,$aliases,$port,$proto) = getservent)  {
    if  ((lc $proto) eq 'tcp')  {
	my $mp = $mtcpnames{$name};
	if  ($mp)  {
	    $mp->{HAD} = 1;
	    $had++;
	    push @tcpnconflict, {EXP => $mp, READ => $port} if $port != $mp->{PORT};
	}
	else  {
	    $mp = $mtcpports{$port};
	    push @tcppconflict, {EXP => $mp, READ => $name} if $mp;
	}
    }
    else  {
	my $mp = $mudpnames{$name};
	if  ($mp)  {
	    $mp->{HAD} = 1;
	    $had++;
	    push @udpnconflict, {EXP => $mp, READ => $port} if $port != $mp->{PORT};
	}
	else  {
	    $mp = $mudpports{$port};
	    push @udppconflict, {EXP => $mp, READ => $name} if $mp;
	}
    }
}
endservent;

# If we had any check we had all of them

if  ($had != 0)  {
    if  ($had != $#Portlist + 1)  {
	$errors++;
	print "Warning - service(s) are missing\n";
	for my $p (@Portlist)  {
	    my $name = $p->[0];
	    my $dets = $p->[1];
	    my $pnum = $dets->[0];
	    my $istcp = $dets->[1] eq 'tcp';
	    if  ($istcp)  {
		my $mp = $mtcpnames{$name};
		print "Tcp port $name\n" unless $mp->{HAD};
	    }
	    else  {
		my $mp = $mudpnames{$name};
		print "Udp port $name\n" unless $mp->{HAD};
	    }
	}
    }
}

if  (@tcpnconflict || @tcppconflict || @udpnconflict || @udppconflict)  {
    for my $c (@tcpnconflict)  {
	my $name = $c->{EXP}->{NAME};
	my $eport = $c->{EXP}->{PORT};
	my $rport = $c->{READ};
	print "Unexpected TCP port number $rport for $name expecting $eport\n";
	$warnings++;
    }
    for my $c (@tcppconflict)  {
	my $name = $c->{EXP}->{NAME};
	my $eport = $c->{EXP}->{PORT};
	my $rname = $c->{READ};
	print "TCP port $eport in use by $rname expecting to use it for $name\n";
	$warnings++;
    }
    for my $c (@udpnconflict)  {
	my $name = $c->{EXP}->{NAME};
	my $eport = $c->{EXP}->{PORT};
	my $rport = $c->{READ};
	print "Unexpected UDP port number $rport for $name expecting $eport\n";
	$warnings++;
    }
    for my $c (@udppconflict)  {
	my $name = $c->{EXP}->{NAME};
	my $eport = $c->{EXP}->{PORT};
	my $rname = $c->{READ};
	print "UDP port $eport in use by $rname expecting to use it for $name\n";
	$warnings++;
    }
}

if ($errors)  {
    print "Aborting due to $errors error(s)\n";
    exit 10;
}

unless  ($had)  {
    open(SRV, ">>/etc/services") or die "Cannot open services file\n";
    print SRV "# GNUspool services\n";
    for my $p (@Portlist)  {
	my $name = $p->[0];
	my $dets = $p->[1];
	my $pnum = $dets->[0];
	my $proto = $dets->[1];
	my $comment = $dets->[2];
	my @altnames = @{$dets->[3]};
	print SRV "$name\t$pnum/$proto ", join(' ', @altnames), " #$comment\n";
    }
    close SRV;
}

unless (-f "@sysconfdir@/gnuspool-hosts")  {
    my $hn = `hostname`;
    chop($hn);
    my $he = gethostbyname($hn);
    my $ha = inet_ntoa($he);
    unless ($ha =~ /^127\./)  {
	if  (open(HF, ">/@sysconfdir@/gnuspool-hosts"))  {
	    my $lt = localtime;
	    print HF "# Host file created on $lt\n\n";
	    print HF "localaddress\t$ha\n";
	    close HF;
	}
    }
}
