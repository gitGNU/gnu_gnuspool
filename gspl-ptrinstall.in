#! /usr/bin/perl
#
#   Copyright 2013 Free Software Foundation, Inc.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

use Socket;

sub substitute {
   my $string = shift;
   $string =~ s/\$\{\w+\}/$&/eeg;
   $string;
}

##################################################################################
#
#   Bootstrap.....
#
# This is a "mini" parse of the master config file so we can find where
# the "progs" directory is to do it all properly.
##################################################################################

sub mini_parse_mconfig {

    ##################################################################################
    # First set up defaults as per build
    # Initialise the SPROGDIR directory
    # THE NEXT LINE SHOULD HAVE BEEN AUTO-EXPANDED SO IT DOESN'T HAVE @S IN IT!!!!!!!
    #################################################################################

    my $sprogdir = substitute('@pkgexecdir@');
    my $sdatadir = substitute('@pkgdatadir@');
    my $userpath = substitute('@bindir@');

    #################################################################################

    # Well it might not have done so let's set it properly if it still has @s in it

    $sprogdir = "/usr/local/libexec/gnuspool" if $sprogdir =~ /\@/;
    $sdatadir = "/usr/local/share/gnuspool" if $sdatadir =~ /\@/;
    $userpath = "/usr/local/bin" if $userpath =~ /\@/;

    # Now read master config file in case that resets it, only looking at that

    return ($sprogdir, $sdatadir) unless open(MC, "/usr/local/etc/gnuspool.conf");

    while  (<MC>)  {
        chomp;
        s/#.*//;
        next unless /(SPROGDIR|SDATADIR|USERPATH)[:=](\S)+/;
        if  ($1 eq 'SPROGDIR')  {
            $sprogdir = $2;
        } elsif ($1 eq 'SDATADIR') {
            $sdatadir = $2;
        }
        else  {
            $userpath = $2;
        }
    }
    close MC;
    ($sprogdir, $sdatadir, $userpath);
}

################################################################################
#                                                                              #
#                       Start here                                             #
#                                                                              #
################################################################################

# Optional argument giving printer name and --cupspy to say if cupspy running
# (we still look for it anyhow in case we are invoked from the command line)

BEGIN {

die "You have to be super-user to run this" unless $> == 0;

# Set up variables corresponding to environment variables not expanded by configure

$prefix = '@prefix@';
$exec_prefix = substitute('@exec_prefix@');
$datarootdir = substitute('@datarootdir@');

($SPROGDIR, $SDATADIR, $USERPATH) = mini_parse_mconfig;
$PERLINST = "$SPROGDIR/perlinst";
$INSTHELP = "$SDATADIR/insthelp";

$Sysuser = "@SPOOLUSER@";
$Sysuser = "gnuspool" if $Sysuser =~ /\@/;
($Daemuid, $Daemgid) = (getpwnam($Sysuser))[2,3];
unless  ($Daemuid)  {
    print "User $Sysuser is not defined\n";
    exit 9;
}

unless (-d $PERLINST)  {
    print "Sorry cannot find installation routine directory $PERLINST\n";
    exit 10;
}
print "***Warning: Cannot find installation help directory $INSTHELP - not fatal\n" unless -d $INSTHELP;

# Add installation help to search path and get "real" config.

push @INC, $PERLINST;

}       # END of BEGIN bit

# This is where we load the "real" config data which we created when we ran configure with the
# real places in.

require 'ptrinsconfig.pl';

$Sname = `uname -s`;
chop $Sname;

# Get all the bits we need from the perlinst dir

use disphelp;
use charops;
use outformat;
use filerouts;
use ptrins_spoolops;
use ptrins_env;
use ptrins_param;
use ptrins_dev;
use ptrins_spoolparam;
use ptrins_ptr;
use ptrins_ptrlist;
use ptrins_parsedev;
use ptrins_ptype;
use ptrins_ptype_plain;
use ptrins_ptype_epson;
use ptrins_ptype_ibm;
use ptrins_ptype_pcl;
use ptrins_ptype_ps;
use ptrins_ptype_pclps;
use ptrins_ptype_pjl;
use ptrins_parsedef;
use ptrins_cupspy;
use ptrins_editptr;

# Get system setup parameters, currently only whether we know CUPSPY is installed.

$Env = ptrins_env->new();
$Env->parseargs($Sysuser, \@ARGV);
$Env->clear;

outformat::underline(\*STDOUT, "GNUspool Printer installation", "=");

print <<EOT;
Welcome to GNUspool Printer installation.

Note that in most places you can press F1 or ? to get help,
F2 or ENTER to continue (and accept default answer)
F8 or Q (capital) to abort.

Press space or TAB to cycle through a list of options.
Press the first character of an option to jump to that.

============================================================
EOT

$Env->pausehelp("Just giving introduction");
$Env->isrunning(spool_ops::isrunning);
$Printerlist = spool_ops::list_defptrs;
$Env->printerlist($Printerlist);
if ($Env->isrunning)  {
    spool_ops::insptrs_online($Printerlist);
}
else {
    spool_ops::insptrs_offline($Printerlist);
}

# Parse the device files for each of the defined printers

parsedev::parse_devices($Printerlist);
parsedefault::parse_defaults($Printerlist);

my $donethings = 0;

for  (;;)  {

    my $Printernames = $Printerlist->getptrlist;

    if ($#$Printernames >= 0)  {
        my $n = $#$Printernames + 1;
        my $s = $n > 1? "s": "";
        if  ($Env->askyorn("Currently have $n printer$s defined - display", 0, "Just asking if you want printers listed before continuing"))  {
            my $dpl = $Printerlist->display;
            my ($ins,$unins) = @$dpl;
            push @$ins, @$unins;
            unshift @$ins, [ 'Name', 'Description', 'Device/dest', 'Clone?'];
            if ($#$ins >= 0)  {
                print "\n";
                outformat::underline(\*STDOUT, "Defined printers");
                outformat::multicol(\*STDOUT, $ins);
            }
        }
        if  ($Env->askyorn("Do you want to change anything", 0, "Just asking if you want to make changes to any existing printers"))  {
            editptr::modify_printer($Env);
            $donethings++;
            next;
        }
    }
    if  ($donethings == 0  ||  $Env->askyorn("Do you want to add a printer as well", 0, "Do you want to add a new printer as well as your changes"))  {
        $Env->clear;
        print <<EOT;
Setting up to create a new printer.

First we need to describe the interface and emulation of the printer.
Then we may want to install it into the system.

EOT
        editptr::create_printer($Env);
    }
    last unless $Env->askyorn("Do you want to do anything more", 0, "Just asking if you want to do anything else");
}

$Env->clear;
print <<EOT;

Thank you for using the printer installation routine.

Your comments for improvements would be appreciated.

We continue to hope you have success with our software.
EOT
exit 0;
